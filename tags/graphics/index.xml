<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphics on C&#43;&#43; Minor</title>
    <link>https://atyuwen.github.io/tags/graphics/</link>
    <description>Recent content in Graphics on C&#43;&#43; Minor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 17 May 2021 17:42:19 +0800</lastBuildDate>
    
	<atom:link href="https://atyuwen.github.io/tags/graphics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fast Divergence-Free Noise Generation in Shaders</title>
      <link>https://atyuwen.github.io/posts/bitangent-noise/</link>
      <pubDate>Mon, 17 May 2021 17:42:19 +0800</pubDate>
      
      <guid>https://atyuwen.github.io/posts/bitangent-noise/</guid>
      <description>This article describes a method called &amp;ldquo;Bitangent Noise&amp;rdquo; which can generate divergence-free noise efficiently. The implementation is a single shader without any other dependencies, and both HLSL and GLSL codes are provided for your convenience. The following image shows a particle system that is updated using bitangent noise.
Bitangent Noise Divergence-free noise is an ingenious technique that is extremely suitable for driving particles to move like real fluid motion. The most widely used divergence-free noise generator is called Curl Noise 1, I first knew it from smash&#39;s great article 2 about the making of the blunderbuss demo, in which the fluid effect impressed me deeply.</description>
    </item>
    
    <item>
      <title>Accurate Normal Reconstruction from Depth Buffer</title>
      <link>https://atyuwen.github.io/posts/normal-reconstruction/</link>
      <pubDate>Mon, 20 Jan 2020 09:58:17 +0800</pubDate>
      
      <guid>https://atyuwen.github.io/posts/normal-reconstruction/</guid>
      <description>Months ago I read a nice article 1 about normal reconstruction by János Turánszki (@turanszkij), which reminded me that I had also tackled this problem before, but for a different purpose. While Turánszki reconstructed normal from depth buffer for better SSAO, I was aimed for rendering decals.
In screen-space decals rendering, normal buffer is required to reject pixels projected onto near-perpendicular surfaces. But back then I was working on a forward pipeline, so no normal buffer was outputted.</description>
    </item>
    
    <item>
      <title>Draw Anti-aliased Lines with Geometry Shader</title>
      <link>https://atyuwen.github.io/posts/antialiased-line/</link>
      <pubDate>Wed, 01 Jan 2020 09:20:55 +0800</pubDate>
      
      <guid>https://atyuwen.github.io/posts/antialiased-line/</guid>
      <description>For engine programmers, there are many cases you have to draw lines on screen, e.g. rendering a grid on the ground, drawing bounding boxes and other helper objects. Usually it&#39;s not a problem if you are very used to the jaggies, but recently I can&#39;t stand it anymore, my eyes complain to me that they want anti-aliased lines. After a quick search on google, it surprises me that there is no existing handy code piece can meet my needs.</description>
    </item>
    
  </channel>
</rss>